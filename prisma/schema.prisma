generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
   relationMode = "foreignKeys"
}


model User {
  id                        Int                     @id @default(autoincrement())
  fullname                  String
  fulllastname              String
  email                     String                  @unique
  username                  String                  @unique
  password                  String
  foto                      String?                 // Campo opcional para foto
  estadoUsuario             String?                 // Estado opcional del usuario
  role                      Role                    @default(USER)  // Rol del usuario
  createdAt                 DateTime                @default(now())
  updatedAt                 DateTime                @updatedAt

  // Relación con Aviso
  avisos                    Aviso[]                 // Un usuario puede tener múltiples avisos

  // Relación con Inventario
  inventario                Inventario[]            // Un usuario puede agregar múltiples elementos al inventario

  // Relación con CalendarEvent
  calendarEvents            CalendarEvent[]         // Un usuario puede tener múltiples eventos de calendario

  // Relación con ProjectUser (tabla intermedia)
  projectUsers              ProjectUser[]           // Un usuario puede estar en múltiples proyectos

  // Relación con Vacaciones
  vacaciones                Vacaciones[]            // Relación inversa con el modelo Vacaciones

  // Relación con VacacionesExtemporaneas
  vacacionesExtemporaneas   VacacionesExtemporaneas[] // Relación inversa con el modelo VacacionesExtemporaneas

  // Relación con Permisos
  permisos                  Permisos[]              // Relación inversa con el modelo Permisos

  // Relación con InscripcionCursos
  inscripcionCursos         InscripcionCursos[]     // Un usuario puede estar inscrito en múltiples cursos

  // Relación con Cursos
  cursos                    Cursos[]                // Un usuario puede crear múltiples cursos

  // Relación con Certificados
  certificados              Certificados[]          // Un usuario puede tener múltiples certificados

  // Relación con Nominas
  nominas                   Nominas[]               // Un usuario puede tener múltiples nóminas

  // Relación con Noticia
  noticias                  Noticia[]               // Un usuario puede crear múltiples noticias

  // Relación con Tablero (como propietario)
  tableros                  Tablero[]               // Un usuario puede ser propietario de múltiples tableros

  // Relación con TableroUsuario (como colaborador)
  tablerosColaboradores     TableroUsuario[]        // Un usuario puede colaborar en múltiples tableros

  // Relación con Tarjeta (como usuario asignado)
  tarjetasAsignadas         Tarjeta[]               // Un usuario puede estar asignado a múltiples tarjetas

  // Relación con Etiquetas (opcional)
  etiquetasCreadas          Etiqueta[]              // Un usuario puede crear múltiples etiquetas (opcional)

  subtareas                 Subtarea[]              // Un usuario puede estar asociado a múltiples subtareas
  notificaciones            Notificacion[]          // Un usuario puede recibir múltiples notificaciones
  comentarios               Comentario[]            // Un usuario puede hacer múltiples comentarios

}

model Aviso {
  id           Int       @id @default(autoincrement())
  description  String    // Descripción del aviso
  date         DateTime  // Fecha del aviso
  read         Boolean   @default(false) // Indica si el aviso fue leído o no
  user         User      @relation(fields: [userId], references: [id]) // Relación con User
  userId       Int       // Foreign key a User
}

model Inventario {
  id_elemento    String    @id // Usamos String como ID único
  nombre_elemento String   // Nombre del elemento
  descripcion    String    // Descripción del elemento
  cantidad       Int       // Cantidad disponible
  ubicacion      String    // Ubicación del elemento
  tipo_elemento  String    // Tipo del elemento (Ej. equipo, herramienta, etc.)
  imagen         String?   // URL o ruta de la imagen del elemento
  categoria      String    // Categoría del elemento
  createdAt     DateTime  @default(now()) // Fecha de creación
  updatedAt     DateTime  @updatedAt      // Fecha de última actualización

  // Relación con User (Opcional)
  user           User?     @relation(fields: [userId], references: [id])
  userId         Int?      // Relación opcional con usuario (nullable)
}

model CalendarEvent {
  id          Int       @id @default(autoincrement())
  title       String    // Título del evento
  start       DateTime  // Fecha y hora de inicio
  end         DateTime  // Fecha y hora de finalización
  description String?   // Descripción del evento (opcional)
  user        User      @relation(fields: [userId], references: [id]) // Relación con User
  userId      Int       // Foreign key a User
  createdAt   DateTime  @default(now()) // Fecha de creación
  updatedAt   DateTime  @updatedAt      // Fecha de última actualización
}

model Project {
  id                Int             @id @default(autoincrement())
  nombre_proyecto   String          // Nombre del proyecto
  imagen_proyecto   String?         // Campo opcional para la imagen del proyecto
  descripcion       String          // Descripción del proyecto
  createdAt         DateTime        @default(now()) // Fecha de creación
  updatedAt         DateTime        @updatedAt      // Fecha de última actualización

  // Relación con ProjectUser
  projectUsers      ProjectUser[]   // Un proyecto puede tener múltiples usuarios

  // Nueva relación con Calculadora
  calculadoras       Calculadora[]    // Un proyecto puede tener múltiples entradas en la calculadora
}

model ProjectUser {
  id                 Int       @id @default(autoincrement())
  userId             Int       // Foreign key a User
  projectId          Int       // Foreign key a Project
  fecha_inicio_user  DateTime  // Fecha de inicio de participación del usuario
  fecha_fin_user     DateTime? // Fecha de finalización de participación del usuario (opcional)
  observaciones      String?   // Campo opcional para observaciones
  estado_usuario     String    // Estado del usuario en el proyecto (Ej: Activo o Inactivo)

  // Relación con User
  user     User     @relation(fields: [userId], references: [id])
  
  // Relación con Project
  project  Project  @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])  // Asegura que no haya duplicados para un usuario en un proyecto
}

model Vacaciones {
  id                Int       @id @default(autoincrement())
  userId            Int       // Foreign key a User
  tipo_vacaciones   String    // Tipo de vacaciones (Ej. Anual, Especial)
  fecha_inicio      DateTime  // Fecha de inicio de vacaciones
  fecha_fin         DateTime  // Fecha de fin de vacaciones
  dias_vacaciones   Int       // Número de días de vacaciones asignados
  dias_restantes    Int       // Días de vacaciones restantes
  estado_solicitud  String    @default("Pendiente")  // Estado de la solicitud de vacaciones
  createdAt         DateTime  @default(now())        // Fecha de creación
  updatedAt         DateTime  @updatedAt             // Fecha de última actualización

  // Relación con User
  usuario           User      @relation(fields: [userId], references: [id])
}

model VacacionesExtemporaneas {
  id                Int       @id @default(autoincrement())
  userId            Int       // Foreign key a User
  fecha_inicio      DateTime  // Fecha de inicio de vacaciones extemporáneas
  fecha_fin         DateTime  // Fecha de fin de vacaciones extemporáneas
  dias_vacaciones   Int       // Número de días solicitados extemporáneamente
  estado_solicitud  String    @default("Pendiente")  // Estado de la solicitud de vacaciones extemporáneas
  persona_aprueba   Int?      // Persona que aprueba la solicitud (usuario de RRHH)
  createdAt         DateTime  @default(now())        // Fecha de creación
  updatedAt         DateTime  @updatedAt             // Fecha de última actualización

  // Relación con User
  usuario           User      @relation(fields: [userId], references: [id])
}

model Permisos {
  id                Int       @id @default(autoincrement())
  userId            Int       // Foreign key a User
  motivo_permiso    String    // Motivo del permiso
  fecha_inicio      DateTime  // Fecha y hora de inicio del permiso
  fecha_fin         DateTime  // Fecha y hora de fin del permiso
  horas_de_permiso  String    // Duración del permiso en horas
  estado_solicitud  String    @default("Pendiente")  // Estado de la solicitud de permiso
  fecha_recuperacion_inicio DateTime? // Fecha y hora de inicio de la recuperación del permiso
  fecha_recuperacion_fin    DateTime? // Fecha y hora de fin de la recuperación del permiso
  createdAt         DateTime  @default(now())        // Fecha de creación
  updatedAt         DateTime  @updatedAt             // Fecha de última actualización

  // Relación con User
  usuario           User      @relation(fields: [userId], references: [id])
}

model Cursos {
  id                Int       @id @default(autoincrement())
  nombre            String    // Nombre del curso
  descripcion       String?   // Descripción del curso
  fecha_inicio      DateTime  // Fecha de inicio del curso
  fecha_fin         DateTime  // Fecha de fin del curso
  fecha_publicacion DateTime  @default(now()) // Fecha de publicación
  ubicacion         String?   // Ubicación del curso
  userId            Int       // Foreign key a User

  // Relación con User
  usuario           User      @relation(fields: [userId], references: [id])

  // Relación con InscripcionCursos
  inscripcion       InscripcionCursos[] // Un curso puede tener múltiples inscripciones
}

model InscripcionCursos {
  id                Int       @id @default(autoincrement())
  userId            Int       // Foreign key a User
  cursoId           Int       // Foreign key a Curso
  fecha_inscripcion DateTime  @default(now()) // Fecha de inscripción
  estado_inscripcion String   @default("Pendiente") // Estado de la inscripción

  // Relación con User
  usuario           User      @relation(fields: [userId], references: [id])

  // Relación con Cursos
  curso             Cursos    @relation(fields: [cursoId], references: [id])

  @@unique([userId, cursoId]) // Asegura que no haya duplicados de inscripción
}

model Certificados {
  id_certificado      Int       @id @default(autoincrement())
  userId              Int       // Foreign key a User
  nombre_certificado   String    // Nombre del certificado
  usuario_sube_certificado String // Usuario que subió el certificado
  fecha_subida        DateTime  @default(now()) // Fecha de subida
  archivo_certificado String     // Ruta del archivo

  // Relación con User
  usuario             User      @relation(fields: [userId], references: [id])
}

model Nominas {
  id_nomina          Int       @id @default(autoincrement())
  userId             Int       // Foreign key a User
  usuario_sube_nomina String    // Usuario que subió la nómina
  nombre_nomina      String     // Nombre de la nómina
  fecha_subida       DateTime  @default(now()) // Fecha de subida
  archivo_nomina     String?     // Ruta del archivo

  // Relación con User
  usuario            User      @relation(fields: [userId], references: [id])
}

model Noticia {
  id                 Int       @id @default(autoincrement())
  titulo             String    // Título de la noticia
  imagen             String?   // URL o ruta de la imagen de la noticia
  descripcion        String    // Descripción detallada de la noticia
  fechaPublicacion   DateTime  @default(now()) // Fecha de publicación de la noticia
  userId             Int       // Foreign key estándar que conecta al usuario que publica

  // Relación con el modelo User
  usuario            User      @relation(fields: [userId], references: [id])

  @@index([userId]) // Índice para consultas rápidas por usuario
}

model Calculadora {
  id                Int      @id @default(autoincrement())
  projectDuration   Int      // Duración del proyecto en días
  adminCost         Float    // Costo administrativo
  locativeCost      Float    // Costo locativo
  machineryCost     Float    // Costo de maquinaria
  materialCosts     Float    // Costo de materiales
  otherCosts        Float    // Otros costos
  totalCost         Float    // Costo total calculado
  createdAt         DateTime @default(now()) // Fecha de creación

  // Relación con el modelo Project
  projectId         Int
  project           Project   @relation(fields: [projectId], references: [id])
}

model Tablero {
  id          Int             @id @default(autoincrement())
  titulo      String           // Nombre del tablero
  descripcion String?          // Descripción del tablero
  estado      String           @default("activo") // Estado: activo, archivado
  visibilidad String           @default("privado") // Visibilidad: privado, público
  createdAt   DateTime         @default(now()) // Fecha de creación
  updatedAt   DateTime         @updatedAt      // Fecha de última actualización

  // Relación con el propietario
  userId      Int
  propietario User             @relation(fields: [userId], references: [id])

  // Relación con las listas
  listas      Lista[]          // Un tablero puede tener múltiples listas

  // Relación con usuarios (tabla intermedia)
  usuarios    TableroUsuario[] // Relación con múltiples usuarios
}

model Lista {
  id          Int       @id @default(autoincrement())
  titulo      String    // Título de la lista
  posicion    Int       // Posición de la lista en el tablero
  estado      String    @default("activo") // Estado de la lista: activo, archivado
  tableroId   Int       // Foreign key al tablero
  tablero     Tablero   @relation(fields: [tableroId], references: [id]) // Relación con el tablero

  // Relación con las tarjetas
  tarjetas    Tarjeta[] // Una lista puede tener múltiples tarjetas
}

model Tarjeta {
  id          Int       @id @default(autoincrement())
  titulo      String    // Título de la tarjeta
  descripcion String?   // Descripción de la tarjeta
  posicion    Int       // Posición de la tarjeta en la lista
  estado      String    @default("pendiente") // Estado: pendiente, en progreso, completado
  dueDate     DateTime? // Fecha de vencimiento
  attachments Json?     // Archivos o imágenes relacionadas
  listaId     Int       // Foreign key a la lista
  lista       Lista     @relation(fields: [listaId], references: [id]) // Relación con la lista

  // Relación con un usuario asignado
  userId      Int?
  usuario     User?     @relation(fields: [userId], references: [id]) // Usuario asignado (opcional)

  // Relación con etiquetas
  etiquetas   Etiqueta[] @relation("TarjetaEtiquetas") // Relación con múltiples etiquetas

  subtareas   Subtarea[]    // Relación con múltiples subtareas
  comentarios Comentario[]  // Relación con múltiples comentarios
  adjuntos    Adjunto[]  // Relación con los adjuntos

  createdAt   DateTime  @default(now()) // Fecha de creación
  updatedAt   DateTime  @updatedAt      // Fecha de última actualización
}

model Etiqueta {
  id          Int       @id @default(autoincrement())
  nombre      String    // Nombre de la etiqueta
  color       String    // Color de la etiqueta (Ej: HEX o nombre del color)

  // Relación con tarjetas
  tarjetas    Tarjeta[] @relation("TarjetaEtiquetas") // Relación con múltiples tarjetas

  // Relación con el creador (opcional)
  creadorId   Int?      // ID del usuario que creó la etiqueta
  creador     User?     @relation(fields: [creadorId], references: [id]) // Relación con el modelo User
}

model TableroUsuario {
  id         Int      @id @default(autoincrement())
  userId     Int      // Foreign key a User
  tableroId  Int      // Foreign key a Tablero

  // Relación con Usuario
  usuario    User     @relation(fields: [userId], references: [id])

  // Relación con Tablero
  tablero    Tablero  @relation(fields: [tableroId], references: [id])

  @@unique([userId, tableroId]) // Un usuario no puede estar duplicado en un tablero
}

model Subtarea {
  id          Int       @id @default(autoincrement())
  titulo      String    // Título de la subtarea
  completado  Boolean   @default(false) // Estado de la subtarea
  tarjetaId   Int       // Foreign key a Tarjeta
  tarjeta     Tarjeta   @relation(fields: [tarjetaId], references: [id])
  createdAt   DateTime  @default(now()) // Fecha de creación
  updatedAt   DateTime  @updatedAt      // Última actualización
  userId      Int?      // Foreign key opcional a User
  usuario     User?     @relation(fields: [userId], references: [id]) // Relación con User
  fecha_expiracion DateTime? // Nuevo campo para la fecha de expiración
}

model Comentario {
  id          Int       @id @default(autoincrement())
  contenido   String    // Contenido del comentario
  tarjetaId   Int       // Foreign key a Tarjeta
  tarjeta     Tarjeta   @relation(fields: [tarjetaId], references: [id])
  usuarioId   Int       // Usuario que creó el comentario
  usuario     User      @relation(fields: [usuarioId], references: [id])
  createdAt   DateTime  @default(now()) // Fecha de creación
  updatedAt   DateTime  @updatedAt      // Última actualización
}

model Notificacion {
  id           Int       @id @default(autoincrement())
  mensaje      String    // Mensaje de la notificación
  leido        Boolean   @default(false) // Estado de la notificación
  usuarioId    Int       // Usuario asociado a la notificación
  usuario      User      @relation(fields: [usuarioId], references: [id])
  createdAt    DateTime  @default(now()) // Fecha de creación
}

model Adjunto {
  id          Int      @id @default(autoincrement())
  nombre      String   // Nombre del adjunto
  url         String   // URL o ruta del adjunto
  tarjetaId   Int      // Foreign key a la tarjeta
  tarjeta     Tarjeta  @relation(fields: [tarjetaId], references: [id])

  createdAt   DateTime @default(now()) // Fecha de creación
  updatedAt   DateTime @updatedAt      // Última actualización
}

enum Role {
  USER
  ADMIN
}
